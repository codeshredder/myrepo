

1. cf service structure



cf client              cf app             cf service broker               cf service


cf push   -----------> star app



create service-broker     catalog   ->  
                                    <-  {"services"}

create service          provision   ->                         ->     docker run + start service

                                    <-  {"credentials" "url"}

bind service                 bind   ->

                                    <-  {"credentials" "url"}

                      VCAP_SERVICES <-
                                                             rest
                        app use  service  ------------------------->
                                          <------------------------- 

unbind service              unbind   ->

                       VCAP_SERVICES <-



delete service          deprovision   ->
                                                                ->   remove docer + stop service
                                      <-






2. build service broker


python:

export http_proxy=http://10.175.100.210:8080/
export https_proxy=http://10.175.100.210:8080/



apt-get update;apt-get upgrade;apt-get dist-upgrade;
apt-get install python-dev gcc
apt-get install python-pip


pip install Flask
(need proxy)

pip install flask-httpauth

pip install docker-py



1) catalog

curl -X GET http://127.0.0.1/v2/catalog
curl -X GET -u admin:huawei http://127.0.0.1/v2/catalog


{
  "services": [{
    "id": "service-guid-here",
    "name": "mysql",
    "description": "A MySQL-compatible relational database",
    "bindable": true,
    "plans": [{
      "id": "plan1-guid-here",
      "name": "small",
      "description": "A small shared database with 100mb storage quota and 10 connections"
    },{
      "id": "plan2-guid-here",
      "name": "large",
      "description": "A large dedicated database with 10GB storage quota, 512MB of RAM, and 100 connections",
      "free": false
    }],
    "dashboard_client": {
      "id": "client-id-1",
      "secret": "secret-1",
      "redirect_uri": "https://dashboard.service.com"
    }
  }]
}

2) provision

curl -X PUT -d '{"service_id":"be355a87-3368-4e18-b1b8-1698a2c0dae8", "plan_id":"4ea56c2d-abd7-4923-8d3f-703fda4e6693","organization_guid":"be355a87-3368-4e18-b1b8-1698a2c0dae8","space_guid":"be355a87-3368-4e18-b1b8-1698a2c0dae8"}' http://127.0.0.1/v2/service_instances/be355a87-3368-4e18-b1b8-1698a2c0dae8

3) bind

curl -X PUT -d '{"plan_id": "plan-guid-here", "service_id": "service-guid-here", "app_guid": "app-guid-here"}' http://127.0.0.1/v2/service_instances/:abcd/service_bindings/:efgh

{
  "credentials": {
    "uri": "mysql://mysqluser:pass@mysqlhost:3306/dbname",
    "username": "mysqluser",
    "password": "pass",
    "host": "mysqlhost",
    "port": 3306,
    "database": "dbname"
  }
}
    
4) unbind

(curl -X DELETE 'http://127.0.0.1/v2/service_instances/:instance_id/service_bindings/:id?service_id=service-id-here&plan_id=plan-id-here')
curl -X DELETE 'http://50.50.1.4/v2/service_instances/8beb9124-96d2-4789-8b8d-37c241d5a472/service_bindings/0b883b90-9021-49a0-b6d7-7d929ae1552a?plan_id=4ea56c2d-abd7-4923-8d3f-703fda4e6693&service_id=be355a87-3368-4e18-b1b8-1698a2c0dae8'


5) deprovision

curl -X DELETE 'http://127.0.0.1/v2/service_instances/:id?service_id=service-id-here&plan_id=plan-id-here'




3. install docker

Ubuntu Precise 12.04 (LTS) (64-bit)

apt-get update
apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring

reboot

apt-get update
apt-get install apt-transport-https

apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9

echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list

apt-get update
apt-get install lxc-docker





镜像导入/导出构建的镜像，作为一种状态存在，支持很方便的导入导出。

导出：
docker save <IMAGENAME> | bzip2 -9 -c>image.tar.bz2

导入镜像：
bzip2 -d -c <precise.tar.bz2 | docker load

docker images
docker rmi <image id>


<host端的5000映射到docker端的80端口>
docker run -i -t -p 5000:80 precise /bin/bash

docker run -i -t -p 5000:80 precise /home/collector-service/start.sh


docker rm <container id>


docker ps -a

docker attach  <container id>

直接exit退出会挂起docker，用下面这个命令退出可以保持docker运行
ctrl p + ctrl q 



docker commit  <container id>   <image name> 






4. install service

1) bosh 启动service-broker服务。也可以手动启动


bosh create release releases/cf-mysql-5.yml  

bosh upload release releases/cf-mysql-5.tgz  

或
bosh upload release releases/cf-mysql-5.yml  




bosh deployment cf-mysql.yml  
bosh deploy  


bosh vms



2）cf中配置service-broker

cf login -a  https://api.10.141.123.244.xip.io -u admin -p huawei --skip-ssl-validation
cf target -o yeyun-org -s yeyun-space


如果已经有一个在跑的service-broker

(cf create-service-broker SERVICE_BROKER USERNAME PASSWORD URL)
cf create-service-broker collector admin huawei http://50.50.1.5


cf service-brokers
cf delete-service-broker collector



Broker创建后默认没有开放访问权限，所以需要手动打开

cf curl /v2/service_plans


cf curl /v2/service_plans/bd57ef75-6059-41a2-91fa-50ebb8af08a0 -X 'PUT' -d '{"public":'true'}'
cf curl /v2/service_plans/4ca1c2f4-c71c-4ac1-9a85-33b4e1c643cf -X 'PUT' -d '{"public":'true'}'



(cf create-service SERVICE PLAN SERVICE_INSTANCE)
cf create-service collector normal app-python-collector

cf services


(cf bind-service APPLICATION SERVICE_INSTANCE)
cf bind-service app-python app-python-collector


(Use 'cf push' to ensure your env variable changes take effect)
cf push


取消服务

(cf unbind-service APP SERVICE_INSTANCE)
cf unbind-service app-python app-python-collector

cf delete-service app-python-collector



3) app端使用service


app通过读取环境变量VCAP_SERVICES获得服务

操作端可以通过此命令获得cf app的环境变量
cf files app-python logs/env.log

TMPDIR=/home/vcap/tmp
VCAP_APP_PORT=61013
http_proxy=http://y00265767:xxxxx@10.122.166.18:8080/
USER=vcap
VCAP_APPLICATION={"limits":{"mem":1024,"disk":1024,"fds":16384},"application_version":"64a1acd1-432a-4691-9ec8-beebd6a9438a","application_name":"java-web-portal","application_uris":["java-web-portal.10.141.123.244.xip.io"],"version":"64a1acd1-432a-4691-9ec8-beebd6a9438a","name":"java-web-portal","space_name":"yeyun-space","space_id":"6695d7ed-cdf2-4075-bba5-06d1f9d52402","uris":["java-web-portal.10.141.123.244.xip.io"],"users":null,"instance_id":"9a52f39ca60f44b0908f4c87155e07f9","instance_index":0,"host":"0.0.0.0","port":61013,"started_at":"2014-05-31 17:16:42 +0000","started_at_timestamp":1401556602,"start":"2014-05-31 17:16:42 +0000","state_timestamp":1401556602}
PATH=/bin:/usr/bin
PWD=/home/vcap
VCAP_SERVICES={}
https_proxy=http://y00265767:xxxxx@10.122.166.18:8080/
SHLVL=1
HOME=/home/vcap/app
PORT=61013
VCAP_APP_HOST=0.0.0.0
MEMORY_LIMIT=1024m
_=/usr/bin/env



VCAP_SERVICES sample:

VCAP_SERVICES=
{
  cleardb: [
    {
      name: "cleardb-1",
      label: "cleardb",
      plan: "spark",
      credentials: {
        name: "ad_c6f4446532610ab",
        hostname: "us-cdbr-east-03.cleardb.com",
        port: "3306",
        username: "b5d435f40dd2b2",
        password: "ebfc00ac",
        uri: "mysql://b5d435f40dd2b2:ebfc00ac@us-cdbr-east-03.cleardb.com:3306/ad_c6f4446532610ab",
        jdbcUrl: "jdbc:mysql://b5d435f40dd2b2:ebfc00ac@us-cdbr-east-03.cleardb.com:3306/ad_c6f4446532610ab"
      }
    }
  ],
  cloudamqp: [
    {
      name: "cloudamqp-6",
      label: "cloudamqp",
      plan: "lemur",
      credentials: {
        uri: "amqp://ksvyjmiv:IwN6dCdZmeQD4O0ZPKpu1YOaLx1he8wo@lemur.cloudamqp.com/ksvyjmiv"
      }
    }
    {
      name: "cloudamqp-9dbc6",
      label: "cloudamqp",
      plan: "lemur",
      credentials: {
        uri: "amqp://vhuklnxa:9lNFxpTuJsAdTts98vQIdKHW3MojyMyV@lemur.cloudamqp.com/vhuklnxa"
      }
    }
  ],
  rediscloud: [
    {
      name: "rediscloud-1",
      label: "rediscloud",
      plan: "20mb",
      credentials: {
        port: "6379",
        host: "pub-redis-6379.us-east-1-2.3.ec2.redislabs.com",
        password: "1M5zd3QfWi9nUyya"
      }
    },
  ],
}


VCAP_SERVICES={"collector":[{"name":"app-python-collector","label":"collector","tags":["collector"],"plan":"normal","credentials":{"uri":"http://50.50.1.4:5000/collector/api/v1.0/"}}]}




